"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const __1 = tslib_1.__importStar(require(".."));
const payload = {
    context: {},
    state: {},
    effects: [{ type: 'initialize' }],
    config: undefined
};
test('Should render text with string children without declaring renderAsForm (legacy)', async () => {
    const noop = () => false;
    expect(await (0, __1.render)(__1.default.createElement(__1.AssetsAppImportTypeConfiguration, { onSubmit: noop },
        __1.default.createElement(__1.Text, null, "Example")))(payload, {})).toMatchInlineSnapshot(`
    [
      {
        "aux": {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [],
                          "props": {
                            "text": "Example",
                          },
                          "type": "String",
                        },
                      ],
                      "key": "Text.0",
                      "props": {
                        "format": "markup",
                      },
                      "type": "Text",
                    },
                    {
                      "children": [],
                      "key": "actionButton.Button.0",
                      "props": {
                        "appearance": "subtle",
                        "onClick": {
                          "componentKey": "actionButton.Button.0",
                          "prop": "onClick",
                        },
                        "text": "Cancel",
                      },
                      "type": "Button",
                    },
                  ],
                  "key": "Form.0",
                  "props": {
                    "onSubmit": {
                      "componentKey": "Form.0",
                      "prop": "onSubmit",
                    },
                    "submitButtonAppearance": "primary",
                    "submitButtonText": "Save configuration",
                  },
                  "type": "Form",
                },
              ],
              "key": "AssetsAppImportTypeConfiguration.1",
              "props": {
                "saved": false,
              },
              "type": "AssetsAppImportTypeConfiguration",
            },
          ],
          "type": "View",
        },
        "state": {
          "AssetsAppImportTypeConfiguration.0": {
            "0": false,
          },
        },
        "type": "render",
      },
    ]
  `);
});
test('Should render text with string children with renderAsForm as true', async () => {
    const noop = () => false;
    expect(await (0, __1.render)(__1.default.createElement(__1.AssetsAppImportTypeConfiguration, { onSubmit: noop },
        __1.default.createElement(__1.Text, null, "Example")))(payload, {})).toMatchInlineSnapshot(`
    [
      {
        "aux": {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [],
                          "props": {
                            "text": "Example",
                          },
                          "type": "String",
                        },
                      ],
                      "key": "Text.0",
                      "props": {
                        "format": "markup",
                      },
                      "type": "Text",
                    },
                    {
                      "children": [],
                      "key": "actionButton.Button.0",
                      "props": {
                        "appearance": "subtle",
                        "onClick": {
                          "componentKey": "actionButton.Button.0",
                          "prop": "onClick",
                        },
                        "text": "Cancel",
                      },
                      "type": "Button",
                    },
                  ],
                  "key": "Form.0",
                  "props": {
                    "onSubmit": {
                      "componentKey": "Form.0",
                      "prop": "onSubmit",
                    },
                    "submitButtonAppearance": "primary",
                    "submitButtonText": "Save configuration",
                  },
                  "type": "Form",
                },
              ],
              "key": "AssetsAppImportTypeConfiguration.1",
              "props": {
                "saved": false,
              },
              "type": "AssetsAppImportTypeConfiguration",
            },
          ],
          "type": "View",
        },
        "state": {
          "AssetsAppImportTypeConfiguration.0": {
            "0": false,
          },
        },
        "type": "render",
      },
    ]
  `);
});
test('Should render children directly without a form when renderAsForm is false', async () => {
    const noop = () => false;
    expect(await (0, __1.render)(__1.default.createElement(__1.AssetsAppImportTypeConfiguration, { onSubmit: noop, renderAsForm: false },
        __1.default.createElement(__1.Text, null, "No form")))(payload, {})).toMatchSnapshot();
});
test('should execute onSubmit when Save configuration button is clicked', async () => {
    const onSubmitMock = jest.fn();
    const formDataMock = {
        name: 'Atlassian'
    };
    const formSubmitPayload = {
        context: {},
        state: {},
        effects: [
            {
                type: 'event',
                handler: { componentKey: 'Form.0', prop: 'onSubmit' },
                args: [formDataMock]
            }
        ],
        config: undefined
    };
    await (0, __1.render)(__1.default.createElement(__1.AssetsAppImportTypeConfiguration, { onSubmit: onSubmitMock },
        __1.default.createElement(__1.TextField, { label: "Name", name: "name" })))(formSubmitPayload, {});
    expect(onSubmitMock).toBeCalledWith(formDataMock);
});
